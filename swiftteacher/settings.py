"""
Django settings for swiftteacher project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os, environ
from distutils.util import strtobool

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media/'
STATIC = BASE_DIR / 'static/'
env = environ.Env( # set casting, default value
    DEBUG=(bool, False)
)
environ.Env.read_env( os.path.join(BASE_DIR, '.env') )

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-zr5$)#4xnax+g+=1ni^b&3tt+gb^!ctj^vt!oqcb9z9=xka&w4'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(strtobool(os.getenv('APP_DEBUG', 'True')))

ALLOWED_HOSTS = env("APP_SERVERNAMES").split(" ")
CSRF_TRUSTED_ORIGINS = env("APP_CSRF_TRUSTED_ORIGINS").split(" ")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'debug_toolbar',

    'swift',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

ROOT_URLCONF = 'swiftteacher.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'swiftteacher.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

APP_PRODUCTION = os.getenv("APP_PRODUCTION", "False") if os.getenv("APP_PRODUCTION", "False") == "True" else False
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        # 'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': env("DB_PRO_NAME") if APP_PRODUCTION else env("DB_DEV_NAME"),
        'USER': env("DB_PRO_USERNAME") if APP_PRODUCTION else env("DB_DEV_USERNAME"),
        'PASSWORD': env("DB_PRO_PASSWORD") if APP_PRODUCTION else env("DB_DEV_PASSWORD"),
        'HOST': env("DB_PRO_HOST") if APP_PRODUCTION else env("DB_DEV_HOST"),
        'PORT': env("DB_PRO_PORT") if APP_PRODUCTION else env("DB_DEV_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
STATICFILES_DIRS = [
    #BASE_DIR / 'static/'
    os.path.join(BASE_DIR, 'static'),
]
STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CRONJOBS = [
    """('0 */23 * * *', 'hisensehr.crone.expire_all_leaves'),
    ('0 1 * * *', 'hisensehr.crone.update_user_status'),
    ('0 0 * * *', 'hisenseapi.cron.birthdaynotificationcron'),
    ('0 0 * * *', 'hisenseapi.cron.workanniversarynotificationcron'),
    ('0 4 1 * *', 'hisensehr.crone.attendance_graph_log'),
    ('0 0 * * *', 'hisensehr.crone.document_expiry'),
    ('0 0 * * *', 'hisensehr.crone.probation_alert'),"""
    
]



AUTH_USER_MODEL = 'swift.User'

INTERNAL_IPS = ['127.0.0.1',]

CACHES = {	
    'forgot_password_cache': {	
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',	
        'LOCATION': './log',	
        'TIMEOUT': 30 * 60 * 60  # 30 min	
    },	
    'default': {	
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',	
        'LOCATION': './log',	
    }	
}


#sendgrig email
SENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_PORT = os.getenv('EMAIL_PORT')
EMAIL_USE_TLS = bool(strtobool(os.getenv('EMAIL_USE_TLS', 'True')))
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')

# PUSH NOTIFICATION
PUSH_NOTIFICATIONS_SETTINGS = {
    "FCM_API_KEY": os.getenv('APP_FCM_API_KEY'),

#   # collection of all defined applications
#     "APPLICATIONS": {
#         "hr-portal-hisense": {
#         # PLATFORM (required) determines what additional settings are required.
#         "PLATFORM": "FCM",
#         # required FCM setting
#         "API_KEY": os.getenv('APP_FCM_API_KEY', ''),
#         },
      
#     }
}

ACTIVITY_PASSWORD = os.getenv('ACTIVITY_PASSWORD', None)
BROKER_URL = os.getenv('CELERY_BROKER_URL', None) #'redis://localhost:6379/0'
CELERY_RESULT_BACKEND =  os.getenv('CELERY_BROKER_URL', None) #'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Dhaka'

LOGIN_URL = "/"

CKEDITOR_BASEPATH = "/static/ckeditor/ckeditor/"
CKEDITOR_UPLOAD_PATH = "ckeditor/"
CKEDITOR_IMAGE_BACKEND = "pillow"
CKEDITOR_CONFIGS = {
    'default': {
       'toolbar_Full': [
            ['Bold', 'Italic', 'Underline'],
            ['Link', 'Unlink'],
            ['Smiley'], 
            ['NumberedList','BulletedList'],
        ],
        'width': 'full',
        'extraPlugins': 'justify,liststyle,indent',
        "removePlugins": "stylesheetparser",
        'allowedContent': True,
    },
   }

ALLOWED_IP = os.getenv('ALLOWED_IP').split(',') if os.getenv('ALLOWED_IP') else []